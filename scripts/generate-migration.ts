import { kebabCase, upperFirst, camelCase } from "lodash";
import fs from "fs";
import path from "path";

const TS_EXTENSION = ".ts";
const MIGRATIONS_DIR = path.join(__dirname, "../src/db/migrations");

const handleError = (errorMessage: string) => {
  console.error(errorMessage);
  process.exit(1);
};

const generateMigrationName = (name: string, timestamp: string) =>
  `migration${upperFirst(camelCase(name))}${timestamp}`;

const excludedFiles = ["migrations.ts", "types.ts", "run-migrations.ts"];
// Helper function to fetch all '.ts' files
const fetchMigrationFileNamesWithoutExt = (directory: string) =>
  fs
    .readdirSync(directory)
    .filter(
      (file) =>
        file.endsWith(TS_EXTENSION) && excludedFiles.includes(file) === false
    )
    .map((file) => file.replace(TS_EXTENSION, ""));

const args = process.argv.slice(2);

if (args.length === 0) {
  handleError("Please provide a name for the migration");
}

const migrationName = args.join(" ");
const timestamp = `${Date.now()}`;
const fileName = `${timestamp}-${kebabCase(migrationName)}${TS_EXTENSION}`;
const filePath = path.join(MIGRATIONS_DIR, fileName);
const migrationNameInFile = generateMigrationName(migrationName, timestamp);

const template = `import { RealmMigration } from '../migrations/types';

export const ${migrationNameInFile}: RealmMigration = {
  name: "${migrationNameInFile}",
  migration: (oldRealm, newRealm) => {
  }
}`;

if (fs.existsSync(filePath)) {
  handleError("Migration already exists");
}

fs.writeFileSync(filePath, template);

console.log("Migration created at", filePath);

const indexFilePath = path.join(MIGRATIONS_DIR, "migrations.ts");

const filenamesWithoutExt = fetchMigrationFileNamesWithoutExt(MIGRATIONS_DIR);
filenamesWithoutExt.sort((a, b) => {
  const aTimestamp = Number.parseInt(a.split("-")[0]);
  const bTimestamp = Number.parseInt(b.split("-")[0]);
  return aTimestamp - bTimestamp;
});

const migrationInfo = filenamesWithoutExt.map((filenameWithoutExtension) => {
  const migrationName = upperFirst(
    camelCase(filenameWithoutExtension.split("-").slice(1).join("-"))
  );
  const migrationTimeStamp = filenameWithoutExtension.split("-")[0];
  const migrationVarName = generateMigrationName(
    migrationName,
    migrationTimeStamp
  );
  return {
    fileName: filenameWithoutExtension,
    name: migrationName,
    timestamp: migrationTimeStamp,
    varName: migrationVarName,
  };
});

const indexFile = `// This file is auto-generated by ts-scripts/generate-new-migration.ts
// Do not edit this file manually
// To add a new migration, run 'yarn generate-migration <migration name>'
import { RealmMigration } from '../migrations/types';

${migrationInfo
  .map(({ varName, fileName }) => `import { ${varName} } from './${fileName}';`)
  .join("\n")}
export const migrations: RealmMigration[] = [
  ${migrationInfo.map((migration) => migration.varName).join(",\n  ")},
];
`;

fs.writeFileSync(indexFilePath, indexFile);
